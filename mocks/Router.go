// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	port "github.com/alrund/yp-1-project/internal/domain/port"
	mock "github.com/stretchr/testify/mock"
)

// Router is an autogenerated mock type for the Router type
type Router struct {
	mock.Mock
}

// Get provides a mock function with given fields: path, handler
func (_m *Router) Get(path string, handler http.Handler) {
	_m.Called(path, handler)
}

// Post provides a mock function with given fields: path, handler
func (_m *Router) Post(path string, handler http.Handler) {
	_m.Called(path, handler)
}

// ServeHTTP provides a mock function with given fields: wrt, req
func (_m *Router) ServeHTTP(wrt http.ResponseWriter, req *http.Request) {
	_m.Called(wrt, req)
}

// Use provides a mock function with given fields: mwf
func (_m *Router) Use(mwf ...func(http.Handler) http.Handler) {
	_va := make([]interface{}, len(mwf))
	for _i := range mwf {
		_va[_i] = mwf[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// WithPrefix provides a mock function with given fields: prefix
func (_m *Router) WithPrefix(prefix string) port.Router {
	ret := _m.Called(prefix)

	var r0 port.Router
	if rf, ok := ret.Get(0).(func(string) port.Router); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(port.Router)
		}
	}

	return r0
}

type mockConstructorTestingTNewRouter interface {
	mock.TestingT
	Cleanup(func())
}

// NewRouter creates a new instance of Router. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRouter(t mockConstructorTestingTNewRouter) *Router {
	mock := &Router{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
