// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/alrund/yp-1-project/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UserGetter is an autogenerated mock type for the UserGetter type
type UserGetter struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, userID
func (_m *UserGetter) Get(ctx context.Context, userID uuid.UUID) (*entity.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserGetter creates a new instance of UserGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserGetter(t mockConstructorTestingTNewUserGetter) *UserGetter {
	mock := &UserGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
