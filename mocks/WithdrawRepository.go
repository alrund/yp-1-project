// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/alrund/yp-1-project/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// WithdrawRepository is an autogenerated mock type for the WithdrawRepository type
type WithdrawRepository struct {
	mock.Mock
}

type WithdrawRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *WithdrawRepository) EXPECT() *WithdrawRepository_Expecter {
	return &WithdrawRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, order
func (_m *WithdrawRepository) Add(ctx context.Context, order *entity.Withdraw) error {
	ret := _m.Called(ctx, order)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Withdraw) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithdrawRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type WithdrawRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//  - ctx context.Context
//  - order *entity.Withdraw
func (_e *WithdrawRepository_Expecter) Add(ctx interface{}, order interface{}) *WithdrawRepository_Add_Call {
	return &WithdrawRepository_Add_Call{Call: _e.mock.On("Add", ctx, order)}
}

func (_c *WithdrawRepository_Add_Call) Run(run func(ctx context.Context, order *entity.Withdraw)) *WithdrawRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Withdraw))
	})
	return _c
}

func (_c *WithdrawRepository_Add_Call) Return(_a0 error) *WithdrawRepository_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

// Change provides a mock function with given fields: ctx, order
func (_m *WithdrawRepository) Change(ctx context.Context, order *entity.Withdraw) error {
	ret := _m.Called(ctx, order)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Withdraw) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithdrawRepository_Change_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Change'
type WithdrawRepository_Change_Call struct {
	*mock.Call
}

// Change is a helper method to define mock.On call
//  - ctx context.Context
//  - order *entity.Withdraw
func (_e *WithdrawRepository_Expecter) Change(ctx interface{}, order interface{}) *WithdrawRepository_Change_Call {
	return &WithdrawRepository_Change_Call{Call: _e.mock.On("Change", ctx, order)}
}

func (_c *WithdrawRepository_Change_Call) Run(run func(ctx context.Context, order *entity.Withdraw)) *WithdrawRepository_Change_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Withdraw))
	})
	return _c
}

func (_c *WithdrawRepository_Change_Call) Return(_a0 error) *WithdrawRepository_Change_Call {
	_c.Call.Return(_a0)
	return _c
}

// Get provides a mock function with given fields: ctx, withdrawID
func (_m *WithdrawRepository) Get(ctx context.Context, withdrawID uuid.UUID) (*entity.Withdraw, error) {
	ret := _m.Called(ctx, withdrawID)

	var r0 *entity.Withdraw
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Withdraw); ok {
		r0 = rf(ctx, withdrawID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Withdraw)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, withdrawID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithdrawRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type WithdrawRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - withdrawID uuid.UUID
func (_e *WithdrawRepository_Expecter) Get(ctx interface{}, withdrawID interface{}) *WithdrawRepository_Get_Call {
	return &WithdrawRepository_Get_Call{Call: _e.mock.On("Get", ctx, withdrawID)}
}

func (_c *WithdrawRepository_Get_Call) Run(run func(ctx context.Context, withdrawID uuid.UUID)) *WithdrawRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *WithdrawRepository_Get_Call) Return(_a0 *entity.Withdraw, _a1 error) *WithdrawRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAllByUser provides a mock function with given fields: ctx, user
func (_m *WithdrawRepository) GetAllByUser(ctx context.Context, user *entity.User) ([]*entity.Withdraw, error) {
	ret := _m.Called(ctx, user)

	var r0 []*entity.Withdraw
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) []*entity.Withdraw); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Withdraw)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithdrawRepository_GetAllByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllByUser'
type WithdrawRepository_GetAllByUser_Call struct {
	*mock.Call
}

// GetAllByUser is a helper method to define mock.On call
//  - ctx context.Context
//  - user *entity.User
func (_e *WithdrawRepository_Expecter) GetAllByUser(ctx interface{}, user interface{}) *WithdrawRepository_GetAllByUser_Call {
	return &WithdrawRepository_GetAllByUser_Call{Call: _e.mock.On("GetAllByUser", ctx, user)}
}

func (_c *WithdrawRepository_GetAllByUser_Call) Run(run func(ctx context.Context, user *entity.User)) *WithdrawRepository_GetAllByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.User))
	})
	return _c
}

func (_c *WithdrawRepository_GetAllByUser_Call) Return(_a0 []*entity.Withdraw, _a1 error) *WithdrawRepository_GetAllByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetWithdrawn provides a mock function with given fields: ctx, user
func (_m *WithdrawRepository) GetWithdrawn(ctx context.Context, user *entity.User) (float32, error) {
	ret := _m.Called(ctx, user)

	var r0 float32
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) float32); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(float32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithdrawRepository_GetWithdrawn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithdrawn'
type WithdrawRepository_GetWithdrawn_Call struct {
	*mock.Call
}

// GetWithdrawn is a helper method to define mock.On call
//  - ctx context.Context
//  - user *entity.User
func (_e *WithdrawRepository_Expecter) GetWithdrawn(ctx interface{}, user interface{}) *WithdrawRepository_GetWithdrawn_Call {
	return &WithdrawRepository_GetWithdrawn_Call{Call: _e.mock.On("GetWithdrawn", ctx, user)}
}

func (_c *WithdrawRepository_GetWithdrawn_Call) Run(run func(ctx context.Context, user *entity.User)) *WithdrawRepository_GetWithdrawn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.User))
	})
	return _c
}

func (_c *WithdrawRepository_GetWithdrawn_Call) Return(_a0 float32, _a1 error) *WithdrawRepository_GetWithdrawn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Remove provides a mock function with given fields: ctx, withdrawID
func (_m *WithdrawRepository) Remove(ctx context.Context, withdrawID uuid.UUID) error {
	ret := _m.Called(ctx, withdrawID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, withdrawID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithdrawRepository_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type WithdrawRepository_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//  - ctx context.Context
//  - withdrawID uuid.UUID
func (_e *WithdrawRepository_Expecter) Remove(ctx interface{}, withdrawID interface{}) *WithdrawRepository_Remove_Call {
	return &WithdrawRepository_Remove_Call{Call: _e.mock.On("Remove", ctx, withdrawID)}
}

func (_c *WithdrawRepository_Remove_Call) Run(run func(ctx context.Context, withdrawID uuid.UUID)) *WithdrawRepository_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *WithdrawRepository_Remove_Call) Return(_a0 error) *WithdrawRepository_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewWithdrawRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewWithdrawRepository creates a new instance of WithdrawRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWithdrawRepository(t mockConstructorTestingTNewWithdrawRepository) *WithdrawRepository {
	mock := &WithdrawRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
