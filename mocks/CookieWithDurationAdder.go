// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// CookieWithDurationAdder is an autogenerated mock type for the CookieWithDurationAdder type
type CookieWithDurationAdder struct {
	mock.Mock
}

type CookieWithDurationAdder_Expecter struct {
	mock *mock.Mock
}

func (_m *CookieWithDurationAdder) EXPECT() *CookieWithDurationAdder_Expecter {
	return &CookieWithDurationAdder_Expecter{mock: &_m.Mock}
}

// AddCookieWithDuration provides a mock function with given fields: name, value, duration, w
func (_m *CookieWithDurationAdder) AddCookieWithDuration(name string, value string, duration string, w http.ResponseWriter) error {
	ret := _m.Called(name, value, duration, w)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, http.ResponseWriter) error); ok {
		r0 = rf(name, value, duration, w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CookieWithDurationAdder_AddCookieWithDuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCookieWithDuration'
type CookieWithDurationAdder_AddCookieWithDuration_Call struct {
	*mock.Call
}

// AddCookieWithDuration is a helper method to define mock.On call
//  - name string
//  - value string
//  - duration string
//  - w http.ResponseWriter
func (_e *CookieWithDurationAdder_Expecter) AddCookieWithDuration(name interface{}, value interface{}, duration interface{}, w interface{}) *CookieWithDurationAdder_AddCookieWithDuration_Call {
	return &CookieWithDurationAdder_AddCookieWithDuration_Call{Call: _e.mock.On("AddCookieWithDuration", name, value, duration, w)}
}

func (_c *CookieWithDurationAdder_AddCookieWithDuration_Call) Run(run func(name string, value string, duration string, w http.ResponseWriter)) *CookieWithDurationAdder_AddCookieWithDuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(http.ResponseWriter))
	})
	return _c
}

func (_c *CookieWithDurationAdder_AddCookieWithDuration_Call) Return(_a0 error) *CookieWithDurationAdder_AddCookieWithDuration_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewCookieWithDurationAdder interface {
	mock.TestingT
	Cleanup(func())
}

// NewCookieWithDurationAdder creates a new instance of CookieWithDurationAdder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCookieWithDurationAdder(t mockConstructorTestingTNewCookieWithDurationAdder) *CookieWithDurationAdder {
	mock := &CookieWithDurationAdder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
