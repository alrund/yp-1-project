// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Encryptor is an autogenerated mock type for the Encryptor type
type Encryptor struct {
	mock.Mock
}

// Decrypt provides a mock function with given fields: encrypted
func (_m *Encryptor) Decrypt(encrypted string) (string, error) {
	ret := _m.Called(encrypted)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(encrypted)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(encrypted)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Encrypt provides a mock function with given fields: data
func (_m *Encryptor) Encrypt(data string) (string, error) {
	ret := _m.Called(data)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEncryptor interface {
	mock.TestingT
	Cleanup(func())
}

// NewEncryptor creates a new instance of Encryptor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEncryptor(t mockConstructorTestingTNewEncryptor) *Encryptor {
	mock := &Encryptor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
